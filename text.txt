 Comandos:

git help <comando>
git <comando> --help
-> Ajuda para comandos Git

git config --global user.name "Nome"
-> Configuta o nome de usuario Git

git config --global user.email "myemail@git.com"
-> Configura o email do usuário Git

git config --list
-> Lista de configurações do usuário Git
-------------------------------------------------------------------------------------
git clone <link>
-> Copia o repositório do link para a máquina local

git status
-> Mostra o que há de diferente entre o repositório local e o repositório 
do GitHub

git add <fileName>
-> Adiciona alterações de ficheiros ao repositório local

git add . ou git add -A
-> Adiciona todos os ficheiros do directório corrente

git reset <fileName> 
-> Remove o ficheiro da stage area
   Área uasada quando fazemos add

git reset
-> Remove todos od ficheiros da stage area
 
git rm —cached <fileName>
-> Remove do repositório local 
mas permanece no sistema de ficheiros

git rm -f <fileName>
-> Remove do repositório local bem como do sistema

git commit -m "mensagem"
-> Faz commit das alterações adicionadas
com o comando anterior add no repositório local

git mv <fileName> <newFileName>
-> Altera o nome do ficheiro commited

git push
-> Sincronizaa e actualiza as alterações feitas no repositório local
para o repositório do gitHub

git pull
-> Sincroniza e actualiza um repositório local (já existente) 
através do repositório do gitHub. 
Actualiza o repositório local


// Criar um ficheiro .gitignore
Ficheiro contendo os ficheiros que nao
queremos adicinar nem fazer commit
Exemplos *.log
Ficheiros de log que são criados e queremos meter fora
do repositório.
Ao criar um repositório directamente do gitHub,
temos a opção de criar automaticamente este ficheiro

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Branching

git branch -a 
-> Devolve todos os branches deste repositório

git branch <branchName>
-> Cria um novo branch

git checkout <branchName>
-> Altera para o branchName branch  

git checkout master
-> Altera para o master branchs

git merge branchName (Devo estar no master branch)
-> Faz o merge do branch branchName com o master

git stash
-> Serve para guardar os documentos seguidos (git add)
de um branch que não foram comitados.
Isto é util quando queremos mudar de branch com ficheiros por comitar

git stash apply
-> Serve para aceder aos ficheiros seguidos 
não comitados num determinado branch
Temos de estar dentro do branch

git push -u origin branchName
-> Faz o push do branch para o servidor remoto 
-> A partir daque apenas fazer git push

Apagar brunches 
git branch --merged
-> Indica os branches que foram adicionados ao branch actual

git branch -d <branchName>
-> Apaga o branch mencionado na maquina local

git push origin --delete <branchName>
-> Apaga o branch na máquina remota
--------------------------------------------

Apagar pastas dentro da directoria do gitHub usando o terminal
rm -rf folderName
 


